package com.example.guardiancare.ui.screensimport android.content.Contextimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.text.KeyboardOptionsimport androidx.compose.foundation.verticalScrollimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.automirrored.filled.ArrowBackimport androidx.compose.material.icons.filled.DateRangeimport androidx.compose.material.icons.filled.Emailimport androidx.compose.material.icons.filled.Homeimport androidx.compose.material.icons.filled.Lockimport androidx.compose.material.icons.filled.Personimport androidx.compose.material.icons.filled.Visibilityimport androidx.compose.material.icons.filled.VisibilityOffimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.RadioButtonimport androidx.compose.material3.RadioButtonDefaultsimport androidx.compose.material3.Textimport androidx.compose.material3.TextButtonimport androidx.compose.runtime.Composableimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.clipimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.platform.LocalContextimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.input.ImeActionimport androidx.compose.ui.text.input.KeyboardTypeimport androidx.compose.ui.text.input.PasswordVisualTransformationimport androidx.compose.ui.text.input.VisualTransformationimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.spimport androidx.lifecycle.viewmodel.compose.viewModelimport androidx.navigation.NavControllerimport com.example.guardiancare.Rimport com.example.guardiancare.ui.viewmodel.AuthViewModelimport com.example.guardiancare.ui.viewmodel.AuthViewModelFactory@OptIn(ExperimentalMaterial3Api::class)@Composablefun RegisterScreen(navController: NavController, context: Context) {    var name by remember { mutableStateOf("") }    var email by remember { mutableStateOf("") }    var password by remember { mutableStateOf("") }    var passwordVisible by remember { mutableStateOf(false) }    var dob by remember { mutableStateOf("") }    var address by remember { mutableStateOf("") }    var userType by remember { mutableStateOf("elderly") }        val scrollState = rememberScrollState()    val localContext = LocalContext.current        // Create ViewModel with factory    val authViewModel: AuthViewModel = viewModel(factory = AuthViewModelFactory(context))        Box(        modifier = Modifier            .fillMaxSize()            .background(MaterialTheme.colorScheme.background)    ) {        Column(            modifier = Modifier                .fillMaxSize()                .padding(24.dp)                .verticalScroll(scrollState),            horizontalAlignment = Alignment.CenterHorizontally        ) {            // Top navigation            Row(                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 16.dp),                verticalAlignment = Alignment.CenterVertically            ) {                IconButton(onClick = { navController.popBackStack() }) {                    Icon(                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,                        contentDescription = "Back",                        tint = MaterialTheme.colorScheme.primary                    )                }                                Text(                    text = "Create Account",                    style = MaterialTheme.typography.titleLarge,                    color = MaterialTheme.colorScheme.onBackground,                    fontWeight = FontWeight.Bold,                    modifier = Modifier.padding(start = 8.dp)                )            }                        // App logo            Image(                painter = painterResource(id = R.drawable.register),                contentDescription = "Register Image",                modifier = Modifier                    .size(120.dp)                    .clip(RoundedCornerShape(8.dp)),                contentScale = ContentScale.Fit            )                        Text(                text = "Join Guardian Care",                fontSize = 22.sp,                fontWeight = FontWeight.Bold,                color = MaterialTheme.colorScheme.primary,                modifier = Modifier.padding(vertical = 16.dp)            )                        // User type selection            Text(                text = "I am a:",                fontSize = 16.sp,                fontWeight = FontWeight.Medium,                color = MaterialTheme.colorScheme.onSurfaceVariant,                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 8.dp)            )                        Row(                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 16.dp),                verticalAlignment = Alignment.CenterVertically            ) {                Row(                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.weight(1f)                ) {                    RadioButton(                        selected = userType == "elderly",                        onClick = { userType = "elderly" },                        colors = RadioButtonDefaults.colors(                            selectedColor = MaterialTheme.colorScheme.primary                        )                    )                    Text(                        text = "Elderly",                        color = MaterialTheme.colorScheme.onBackground,                        modifier = Modifier.padding(start = 4.dp)                    )                }                                Row(                    verticalAlignment = Alignment.CenterVertically,                    modifier = Modifier.weight(1f)                ) {                    RadioButton(                        selected = userType == "caretaker",                        onClick = { userType = "caretaker" },                        colors = RadioButtonDefaults.colors(                            selectedColor = MaterialTheme.colorScheme.primary                        )                    )                    Text(                        text = "Caretaker",                        color = MaterialTheme.colorScheme.onBackground,                        modifier = Modifier.padding(start = 4.dp)                    )                }            }                        // Form fields            OutlinedTextField(                value = name,                onValueChange = { name = it },                label = { Text("Full Name") },                leadingIcon = {                    Icon(                        imageVector = Icons.Default.Person,                        contentDescription = "Name Icon",                        tint = MaterialTheme.colorScheme.primary                    )                },                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 12.dp),                keyboardOptions = KeyboardOptions(                    keyboardType = KeyboardType.Text,                    imeAction = ImeAction.Next                ),                singleLine = true,                shape = RoundedCornerShape(12.dp)            )                        OutlinedTextField(                value = email,                onValueChange = { email = it },                label = { Text("Email") },                leadingIcon = {                    Icon(                        imageVector = Icons.Default.Email,                        contentDescription = "Email Icon",                        tint = MaterialTheme.colorScheme.primary                    )                },                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 12.dp),                keyboardOptions = KeyboardOptions(                    keyboardType = KeyboardType.Email,                    imeAction = ImeAction.Next                ),                singleLine = true,                shape = RoundedCornerShape(12.dp)            )                        OutlinedTextField(                value = password,                onValueChange = { password = it },                label = { Text("Password") },                leadingIcon = {                    Icon(                        imageVector = Icons.Default.Lock,                        contentDescription = "Password Icon",                        tint = MaterialTheme.colorScheme.primary                    )                },                trailingIcon = {                    IconButton(onClick = { passwordVisible = !passwordVisible }) {                        Icon(                            imageVector = if (passwordVisible) Icons.Default.VisibilityOff else Icons.Default.Visibility,                            contentDescription = if (passwordVisible) "Hide Password" else "Show Password",                            tint = MaterialTheme.colorScheme.primary                        )                    }                },                visualTransformation = if (passwordVisible) VisualTransformation.None else PasswordVisualTransformation(),                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 12.dp),                keyboardOptions = KeyboardOptions(                    keyboardType = KeyboardType.Password,                    imeAction = ImeAction.Next                ),                singleLine = true,                shape = RoundedCornerShape(12.dp)            )                        OutlinedTextField(                value = dob,                onValueChange = { dob = it },                label = { Text("Date of Birth (YYYY-MM-DD)") },                leadingIcon = {                    Icon(                        imageVector = Icons.Default.DateRange,                        contentDescription = "Date Icon",                        tint = MaterialTheme.colorScheme.primary                    )                },                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 12.dp),                keyboardOptions = KeyboardOptions(                    keyboardType = KeyboardType.Text,                    imeAction = ImeAction.Next                ),                singleLine = true,                shape = RoundedCornerShape(12.dp)            )                        OutlinedTextField(                value = address,                onValueChange = { address = it },                label = { Text("Address") },                leadingIcon = {                    Icon(                        imageVector = Icons.Default.Home,                        contentDescription = "Address Icon",                        tint = MaterialTheme.colorScheme.primary                    )                },                modifier = Modifier                    .fillMaxWidth()                    .padding(bottom = 24.dp),                keyboardOptions = KeyboardOptions(                    keyboardType = KeyboardType.Text,                    imeAction = ImeAction.Done                ),                shape = RoundedCornerShape(12.dp)            )                        // Register button            Button(                onClick = {                    // Use the updated ViewModel method with all fields                    authViewModel.registerUser(                        name = name,                        email = email,                         password = password,                         userType = userType,                        dob = dob.takeIf { it.isNotEmpty() },                        address = address.takeIf { it.isNotEmpty() },                        navController = navController                    )                },                modifier = Modifier                    .fillMaxWidth()                    .height(56.dp),                shape = RoundedCornerShape(12.dp),                colors = ButtonDefaults.buttonColors(                    containerColor = MaterialTheme.colorScheme.primary                )            ) {                Text(                    text = "Register",                    fontSize = 16.sp,                    fontWeight = FontWeight.SemiBold                )            }                        Spacer(modifier = Modifier.height(16.dp))                        // Login link            Row(                modifier = Modifier                    .fillMaxWidth()                    .padding(vertical = 16.dp),                horizontalArrangement = Arrangement.Center,                verticalAlignment = Alignment.CenterVertically            ) {                Text(                    text = "Already have an account? ",                    color = MaterialTheme.colorScheme.onSurfaceVariant                )                                TextButton(onClick = { navController.navigate("login") }) {                    Text(                        text = "Login",                        color = MaterialTheme.colorScheme.primary,                        fontWeight = FontWeight.SemiBold                    )                }            }        }    }}